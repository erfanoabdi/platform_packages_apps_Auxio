// Generated by view binder compiler. Do not edit!
package org.oxycblt.auxio.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.oxycblt.auxio.R;
import org.oxycblt.auxio.image.StyledImageView;
import org.oxycblt.auxio.playback.IndicatorMaterialButton;
import org.oxycblt.auxio.playback.NoRtlFrameLayout;
import org.oxycblt.auxio.playback.StyledSeekBar;

public final class FragmentPlaybackPanelBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView playbackAlbum;

  @NonNull
  public final TextView playbackArtist;

  @NonNull
  public final NoRtlFrameLayout playbackControlsContainer;

  @NonNull
  public final StyledImageView playbackCover;

  @NonNull
  public final FloatingActionButton playbackPlayPause;

  @NonNull
  public final IndicatorMaterialButton playbackRepeat;

  @NonNull
  public final StyledSeekBar playbackSeekBar;

  @NonNull
  public final IndicatorMaterialButton playbackShuffle;

  @NonNull
  public final Button playbackSkipNext;

  @NonNull
  public final Button playbackSkipPrev;

  @NonNull
  public final TextView playbackSong;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   *   <li>layout-sw600dp-land/</li>
   *   <li>layout-w600dp-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   *   <li>layout-sw600dp/</li>
   * </ul>
   */
  @Nullable
  public final FrameLayout playbackSongContainer;

  @NonNull
  public final MaterialToolbar playbackToolbar;

  private FragmentPlaybackPanelBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView playbackAlbum, @NonNull TextView playbackArtist,
      @NonNull NoRtlFrameLayout playbackControlsContainer, @NonNull StyledImageView playbackCover,
      @NonNull FloatingActionButton playbackPlayPause,
      @NonNull IndicatorMaterialButton playbackRepeat, @NonNull StyledSeekBar playbackSeekBar,
      @NonNull IndicatorMaterialButton playbackShuffle, @NonNull Button playbackSkipNext,
      @NonNull Button playbackSkipPrev, @NonNull TextView playbackSong,
      @Nullable FrameLayout playbackSongContainer, @NonNull MaterialToolbar playbackToolbar) {
    this.rootView = rootView;
    this.playbackAlbum = playbackAlbum;
    this.playbackArtist = playbackArtist;
    this.playbackControlsContainer = playbackControlsContainer;
    this.playbackCover = playbackCover;
    this.playbackPlayPause = playbackPlayPause;
    this.playbackRepeat = playbackRepeat;
    this.playbackSeekBar = playbackSeekBar;
    this.playbackShuffle = playbackShuffle;
    this.playbackSkipNext = playbackSkipNext;
    this.playbackSkipPrev = playbackSkipPrev;
    this.playbackSong = playbackSong;
    this.playbackSongContainer = playbackSongContainer;
    this.playbackToolbar = playbackToolbar;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentPlaybackPanelBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentPlaybackPanelBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_playback_panel, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentPlaybackPanelBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.playback_album;
      TextView playbackAlbum = ViewBindings.findChildViewById(rootView, id);
      if (playbackAlbum == null) {
        break missingId;
      }

      id = R.id.playback_artist;
      TextView playbackArtist = ViewBindings.findChildViewById(rootView, id);
      if (playbackArtist == null) {
        break missingId;
      }

      id = R.id.playback_controls_container;
      NoRtlFrameLayout playbackControlsContainer = ViewBindings.findChildViewById(rootView, id);
      if (playbackControlsContainer == null) {
        break missingId;
      }

      id = R.id.playback_cover;
      StyledImageView playbackCover = ViewBindings.findChildViewById(rootView, id);
      if (playbackCover == null) {
        break missingId;
      }

      id = R.id.playback_play_pause;
      FloatingActionButton playbackPlayPause = ViewBindings.findChildViewById(rootView, id);
      if (playbackPlayPause == null) {
        break missingId;
      }

      id = R.id.playback_repeat;
      IndicatorMaterialButton playbackRepeat = ViewBindings.findChildViewById(rootView, id);
      if (playbackRepeat == null) {
        break missingId;
      }

      id = R.id.playback_seek_bar;
      StyledSeekBar playbackSeekBar = ViewBindings.findChildViewById(rootView, id);
      if (playbackSeekBar == null) {
        break missingId;
      }

      id = R.id.playback_shuffle;
      IndicatorMaterialButton playbackShuffle = ViewBindings.findChildViewById(rootView, id);
      if (playbackShuffle == null) {
        break missingId;
      }

      id = R.id.playback_skip_next;
      Button playbackSkipNext = ViewBindings.findChildViewById(rootView, id);
      if (playbackSkipNext == null) {
        break missingId;
      }

      id = R.id.playback_skip_prev;
      Button playbackSkipPrev = ViewBindings.findChildViewById(rootView, id);
      if (playbackSkipPrev == null) {
        break missingId;
      }

      id = R.id.playback_song;
      TextView playbackSong = ViewBindings.findChildViewById(rootView, id);
      if (playbackSong == null) {
        break missingId;
      }

      id = R.id.playback_song_container;
      FrameLayout playbackSongContainer = ViewBindings.findChildViewById(rootView, id);

      id = R.id.playback_toolbar;
      MaterialToolbar playbackToolbar = ViewBindings.findChildViewById(rootView, id);
      if (playbackToolbar == null) {
        break missingId;
      }

      return new FragmentPlaybackPanelBinding((ConstraintLayout) rootView, playbackAlbum,
          playbackArtist, playbackControlsContainer, playbackCover, playbackPlayPause,
          playbackRepeat, playbackSeekBar, playbackShuffle, playbackSkipNext, playbackSkipPrev,
          playbackSong, playbackSongContainer, playbackToolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
